'use strict';

var validateOptions = require('schema-utils');
var fs$1 = require('fs');
var path$1 = require('path');
var makeDir = require('make-dir');
var cpy = require('cpy');
var cpFile = require('cp-file');
var archiver = require('archiver');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var validateOptions__default = /*#__PURE__*/_interopDefaultLegacy(validateOptions);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs$1);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path$1);
var makeDir__default = /*#__PURE__*/_interopDefaultLegacy(makeDir);
var cpy__default = /*#__PURE__*/_interopDefaultLegacy(cpy);
var cpFile__default = /*#__PURE__*/_interopDefaultLegacy(cpFile);
var archiver__default = /*#__PURE__*/_interopDefaultLegacy(archiver);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/**
 * Execute copy action
 *
 * @param {Object} command - Command data for given action
 * @return {Function|null} - Function that returns a promise or null
 */

function copyAction(command, options) {
  var verbose = options.verbose,
      context = options.context;
  return function () {
    return new Promise(function (resolve, reject) {
      // if source is a file, just copyFile()
      // if source is a NOT a glob pattern, simply append **/*
      var fileRegex = /(\*|\{+|\}+)/g;
      var matches = fileRegex.exec(command.source);

      if (matches === null) {
        var source = path__default['default'].resolve(context, command.source);
        fs__default['default'].lstat(source, function (sErr, sStats) {
          if (sErr) return reject(sErr);
          fs__default['default'].lstat(command.destination, function (dErr, dStats) {
            if (sStats.isFile()) {
              var destination = dStats && dStats.isDirectory() ? path__default['default'].resolve(context, command.destination + '/' + path__default['default'].basename(command.source)) : path__default['default'].resolve(context, command.destination);

              if (verbose) {
                console.log("  - FileManagerPlugin: Start copy source: ".concat(command.source, " to destination: ").concat(destination));
              }

              var pathInfo = path__default['default'].parse(destination);

              if (pathInfo.ext === '') {
                makeDir__default['default'](destination).then(function () {
                  cpFile__default['default'](source, path__default['default'].resolve(destination, path__default['default'].basename(source))).then(resolve).catch(reject);
                });
              } else {
                cpFile__default['default'](source, destination).then(resolve).catch(reject);
              }
            } else {
              var sourceDir = command.source + (command.source.substr(-1) !== '/' ? '/' : '') + '**/*';
              copy(sourceDir, command.destination, resolve, reject, options);
            }
          });
        });
      } else {
        copy(command.source, command.destination, resolve, reject, options);
      }
    });
  };
}
/**
 * Execute copy directory
 *
 * @param {string} source - source file path
 * @param {string} destination - destination file path
 * @param {Function} resolve - function used to resolve a Promise
 * @param {Function} reject - function used to reject a Promise
 * @return {void}
 */


function copy(source, destination, resolve, reject, options) {
  var verbose = options.verbose,
      context = options.context;
  /* cpy options */

  var cpyOptions = {
    cwd: context
  };

  if (verbose) {
    console.log("  - FileManagerPlugin: Start copy source file: ".concat(source, " to destination file: ").concat(destination));
  }

  cpy__default['default'](source, destination, cpyOptions).then(function () {
    if (verbose) {
      console.log("  - FileManagerPlugin: Finished copy source: ".concat(source, " to destination: ").concat(destination));
    }

    resolve();
  }).catch(function (err) {
    if (err && options.verbose) {
      console.log('  - FileManagerPlugin: Error - copy failed', err);
      return reject(err);
    }
  });
}

var fs = require('fs');

var mv = require('mv');
/**
 * Execute move action
 *
 * @param {Object} command - Command data for given action
 * @return {Function|null} - Function that returns a promise or null
 */


function moveAction(command, options) {
  var verbose = options.verbose;

  if (fs.existsSync(command.source)) {
    return function () {
      return new Promise(function (resolve, reject) {
        if (verbose) {
          console.log("  - FileManagerPlugin: Start move source: ".concat(command.source, " to destination: ").concat(command.destination));
        }

        mv(command.source, command.destination, {
          mkdirp: false
        }, function (err) {
          if (err) {
            if (verbose) {
              console.log('  - FileManagerPlugin: Error - move failed', err);
            }

            reject(err);
          }

          if (verbose) {
            console.log("  - FileManagerPlugin: Finished move source: ".concat(command.source, " to destination: ").concat(command.destination));
          }

          resolve();
        });
      });
    };
  } else {
    process.emitWarning('  - FileManagerPlugin: Could not move ' + command.source + ': path does not exist');
    return null;
  }
}

var path = require('path');

var rimraf = require('rimraf');
/**
 * Execute delete action
 *
 * @param {Object} command - Command data for given action
 * @return {Function|null} - Function that returns a promise or null
 */


function deleteAction(command, options) {
  var verbose = options.verbose,
      context = options.context;
  return function () {
    return new Promise(function (resolve, reject) {
      if (verbose) {
        console.log("  - FileManagerPlugin: Starting delete path ".concat(command.source));
      }

      var source = path.resolve(context, command.source);
      rimraf(source, {}, function (response) {
        if (verbose && response === null) {
          console.log("  - FileManagerPlugin: Finished delete path ".concat(command.source));
        }

        resolve();
      });
    });
  };
}

/**
 * Execute mkdir action
 *
 * @param {Object} command - Command data for given action
 * @return {Function|null} - Function that returns a promise or null
 */

function mkdirAction(command, options) {
  var verbose = options.verbose,
      context = options.context;
  return function () {
    if (verbose) {
      console.log("  - FileManagerPlugin: Creating path ".concat(command.source));
    }

    var source = path__default['default'].resolve(context, command.source);
    return makeDir__default['default'](source);
  };
}

/**
 * Execute mkdir action
 *
 * @param {Object} command - Command data for given action
 * @return {Function|null} - Function that returns a promise or null
 */

function archiveAction(command, options) {
  var context = options.context;
  var source = path__default['default'].resolve(context, command.source);
  var destination = path__default['default'].resolve(context, command.destination);
  return function () {
    return new Promise(function (resolve, reject) {
      var fileRegex = /(\*|\{+|\}+)/g;
      var matches = fileRegex.exec(command.source);
      var isGlob = matches !== null;
      fs__default['default'].lstat(source, function (sErr, sStats) {
        if (!fs__default['default'].existsSync(path__default['default'].dirname(destination))) {
          fs__default['default'].mkdirSync(path__default['default'].dirname(destination), {
            recursive: true
          });
        }

        var output = fs__default['default'].createWriteStream(destination);
        var archive = archiver__default['default'](command.format, command.options);
        archive.on('error', function (err) {
          return reject(err);
        });
        archive.pipe(output); // Exclude destination file from archive

        var destFile = path__default['default'].basename(destination);
        var globOptions = Object.assign({
          ignore: destFile
        }, command.options.globOptions || {});

        if (isGlob) {
          archive.glob(command.source, _objectSpread2(_objectSpread2({}, globOptions), {}, {
            cwd: context
          }));
        } else if (sStats.isFile()) {
          archive.file(source, {
            name: path__default['default'].basename(command.source),
            cwd: context
          });
        } else if (sStats.isDirectory()) {
          archive.glob('**/*', {
            cwd: source,
            ignore: destFile
          });
        }

        archive.finalize().then(resolve);
      });
    });
  };
}

var schema = {
  title: 'FileManagerPluginOptions',
  type: 'object',
  additionalProperties: false,
  definitions: {
    Copy: {
      description: 'Copy individual files or entire directories from a source folder to a destination folder',
      type: 'array',
      minItems: 1,
      additionalItems: true,
      itmes: [{
        type: 'object',
        additionalProperties: false,
        properties: {
          source: {
            description: 'Copy source. A file or directory or a glob',
            type: 'string',
            minLength: 1
          },
          destination: {
            description: 'Copy destination',
            type: 'string',
            minLength: 1
          }
        }
      }]
    },
    Delete: {
      description: 'Delete individual files or entire directories',
      type: 'array',
      minItems: 1,
      additionalItems: true,
      items: {
        type: 'string'
      }
    },
    Move: {
      description: 'Move individual files or entire directories from a source folder to a destination folder',
      type: 'array',
      additionalItems: true,
      items: [{
        type: 'object',
        additionalProperties: false,
        properties: {
          source: {
            description: 'Move source. A file or directory or a glob',
            type: 'string',
            minLength: 1
          },
          destination: {
            description: 'Move destination',
            type: 'string',
            minLength: 1
          }
        }
      }]
    },
    Mkdir: {
      description: 'Create Directories',
      type: 'array',
      minItems: 1,
      additionalItems: true,
      items: {
        type: 'string'
      }
    },
    Archive: {
      description: 'Archive individual files or entire directories.',
      type: 'array',
      additionalItems: true,
      items: [{
        type: 'object',
        additionalProperties: false,
        properties: {
          source: {
            description: 'Source. A file or directory or a glob',
            type: 'string',
            minLength: 1
          },
          destination: {
            description: 'Archive destination',
            type: 'string',
            minLength: 1
          },
          format: {
            type: 'string',
            enum: ['zip', 'tar']
          },
          options: {
            additionalProperties: true,
            type: 'object',
            description: 'Options to forward to archiver'
          }
        }
      }]
    },
    Events: {
      type: 'object',
      additionalProperties: true,
      properties: {
        copy: {
          $ref: '#/definitions/Copy'
        },
        delete: {
          $ref: '#/definitions/Delete'
        },
        move: {
          $ref: '#/definitions/Move'
        },
        mkdir: {
          $ref: '#/definitions/Mkdir'
        },
        archive: {
          $ref: '#/definitions/Archive'
        }
      }
    }
  },
  properties: {
    onStart: {
      $ref: '#/definitions/Events'
    },
    onEnd: {
      $ref: '#/definitions/Events'
    }
  }
};

var PLUGIN_NAME = 'FileManagerPlugin';

var FileManagerPlugin = /*#__PURE__*/function () {
  function FileManagerPlugin(options) {
    _classCallCheck(this, FileManagerPlugin);

    validateOptions__default['default'](schema, options, {
      name: PLUGIN_NAME,
      baseDataPath: 'options'
    });
    this.options = this.setOptions(options);
  }

  _createClass(FileManagerPlugin, [{
    key: "setOptions",
    value: function setOptions(userOptions) {
      var defaultOptions = {
        verbose: false,
        moveWithMkdirp: false,
        onStart: {},
        onEnd: {}
      };

      for (var key in defaultOptions) {
        if (userOptions.hasOwnProperty(key)) {
          defaultOptions[key] = userOptions[key];
        }
      }

      return defaultOptions;
    }
  }, {
    key: "checkOptions",
    value: function checkOptions(stage) {
      var _this = this;

      if (this.options.verbose && Object.keys(this.options[stage]).length) {
        console.log("FileManagerPlugin: processing ".concat(stage, " event"));
      }

      var operationList = [];

      if (this.options[stage] && Array.isArray(this.options[stage])) {
        this.options[stage].map(function (opts) {
          return operationList.push.apply(operationList, _toConsumableArray(_this.parseFileOptions(opts, true)));
        });
      } else {
        operationList.push.apply(operationList, _toConsumableArray(this.parseFileOptions(this.options[stage])));
      }

      if (operationList.length) {
        operationList.reduce(function (previous, fn) {
          return previous.then(function (retVal) {
            return fn(retVal);
          }).catch(function (err) {
            return console.log(err);
          });
        }, Promise.resolve());
      }
    }
  }, {
    key: "replaceHash",
    value: function replaceHash(filename) {
      return filename.replace('[hash]', this.fileHash);
    }
  }, {
    key: "processAction",
    value: function processAction(action, params, commandOrder) {
      var options = _objectSpread2(_objectSpread2({}, this.options), {}, {
        context: this.context
      });

      var result = action(params, options);

      if (result !== null) {
        commandOrder.push(result);
      }
    }
  }, {
    key: "parseFileOptions",
    value: function parseFileOptions(options) {
      var _this2 = this;

      var commandOrder = [];
      Object.keys(options).forEach(function (actionType) {
        var actionOptions = options[actionType];
        var actionParams = null;
        actionOptions.forEach(function (actionItem) {
          switch (actionType) {
            case 'copy':
              actionParams = Object.assign({
                source: _this2.replaceHash(actionItem.source)
              }, actionItem.destination && {
                destination: actionItem.destination
              });

              _this2.processAction(copyAction, actionParams, commandOrder);

              break;

            case 'move':
              actionParams = Object.assign({
                source: _this2.replaceHash(actionItem.source)
              }, actionItem.destination && {
                destination: actionItem.destination
              });

              _this2.processAction(moveAction, actionParams, commandOrder);

              break;

            case 'delete':
              if (!Array.isArray(actionOptions) || typeof actionItem !== 'string') {
                throw Error("  - FileManagerPlugin: Fail - delete parameters has to be an array of strings");
              }

              actionParams = Object.assign({
                source: _this2.replaceHash(actionItem)
              });

              _this2.processAction(deleteAction, actionParams, commandOrder);

              break;

            case 'mkdir':
              actionParams = {
                source: _this2.replaceHash(actionItem)
              };

              _this2.processAction(mkdirAction, actionParams, commandOrder);

              break;

            case 'archive':
              actionParams = {
                source: _this2.replaceHash(actionItem.source),
                destination: actionItem.destination,
                format: actionItem.format ? actionItem.format : 'zip',
                options: actionItem.options ? actionItem.options : {
                  zlib: {
                    level: 9
                  }
                }
              };

              _this2.processAction(archiveAction, actionParams, commandOrder);

              break;
          }
        });
      });
      return commandOrder;
    }
  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this3 = this;

      this.context = compiler.options.context;

      var comp = function comp(compilation) {
        try {
          _this3.checkOptions('onStart');
        } catch (error) {
          compilation.errors.push(error);
        }
      };

      var afterEmit = function afterEmit(compilation, cb) {
        _this3.fileHash = compilation.hash;

        try {
          _this3.checkOptions('onEnd');
        } catch (error) {
          compilation.errors.push(error);
        }

        cb();
      };

      compiler.hooks.thisCompilation.tap(PLUGIN_NAME, comp);
      compiler.hooks.afterEmit.tapAsync(PLUGIN_NAME, afterEmit);
    }
  }]);

  return FileManagerPlugin;
}();

module.exports = FileManagerPlugin;
//# sourceMappingURL=index.js.map
